import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
public class AincradKDLogger extends javax.swing.JFrame {
    private long lastTime;
    private final ArrayList<Event> events = new ArrayList<>();
    public AincradKDLogger(){
        initComponents();
        load();
        Thread t = new Thread(() -> {
            while(true){
                if(boxAutoScan.isSelected())scan();
                try {
                    Thread.sleep((int)spinnerScanInterval.getValue()*1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AincradKDLogger.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        t.setDaemon(true);
        t.start();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        boxAutoScan = new javax.swing.JCheckBox();
        spinnerScanInterval = new javax.swing.JSpinner();
        buttonScan = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aincrad Kill/Death Logger");

        textAreaOutput.setEditable(false);
        textAreaOutput.setColumns(15);
        textAreaOutput.setRows(20);
        jScrollPane1.setViewportView(textAreaOutput);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout());

        boxAutoScan.setText("Auto Refresh (seconds)");
        jPanel1.add(boxAutoScan);

        spinnerScanInterval.setModel(new javax.swing.SpinnerNumberModel(10, 1, 60, 1));
        jPanel1.add(spinnerScanInterval);

        buttonScan.setText("Manual scan");
        buttonScan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonScanActionPerformed(evt);
            }
        });
        jPanel1.add(buttonScan);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void buttonScanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonScanActionPerformed
        scan();
    }//GEN-LAST:event_buttonScanActionPerformed
    private void refreshOutput(){
        String str = "";
        HashMap<String, Integer> entitiesKilled = new HashMap<>();
        for(Event event : events){
            if(event.event.equals("EntityKilled")){
                if(event.indirectSubject==null)entitiesKilled.put(event.subject, entitiesKilled.getOrDefault(event.subject, 0)+1);
                else entitiesKilled.put(event.indirectSubject, entitiesKilled.getOrDefault(event.indirectSubject, 0)+1);
            }
        }
        ArrayList<String> entityKills = new ArrayList<>(entitiesKilled.keySet());
        entityKills.sort((o1, o2) -> entitiesKilled.get(o2)-entitiesKilled.get(o1));
        if(!entityKills.isEmpty()){
            str+="\nEntities Killed:";
            for(String s : entityKills)str+="\n"+entitiesKilled.get(s)+"x "+s;
        }
        
        HashMap<String, Integer> playersKilled = new HashMap<>();
        for(Event event : events){
            if(event.event.equals("PlayerKilled")){
                if(event.indirectSubject==null)playersKilled.put(event.subject, playersKilled.getOrDefault(event.subject, 0)+1);
                else playersKilled.put(event.indirectSubject, playersKilled.getOrDefault(event.indirectSubject, 0)+1);
            }
        }
        ArrayList<String> playerKills = new ArrayList<>(playersKilled.keySet());
        playerKills.sort((o1, o2) -> playersKilled.get(o2)-playersKilled.get(o1));
        if(!playerKills.isEmpty()){
            str+="\nPlayers Killed:";
            for(String s : playerKills)str+="\n"+playersKilled.get(s)+"x "+s;
        }
        
        HashMap<String, Integer> playerDeaths = new HashMap<>();
        for(Event event : events){
            if(event.event.equals("PlayerDied")){
                if(event.indirectSubject==null)playerDeaths.put(event.subject, playerDeaths.getOrDefault(event.subject, 0)+1);
                else playerDeaths.put(event.indirectSubject, playerDeaths.getOrDefault(event.indirectSubject, 0)+1);
            }
        }
        ArrayList<String> deaths = new ArrayList<>(playerDeaths.keySet());
        deaths.sort((o1, o2) -> playerDeaths.get(o2)-playerDeaths.get(o1));
        if(!deaths.isEmpty()){
            str+="\nDeaths:";
            for(String s : deaths)str+="\n"+playerDeaths.get(s)+"x "+s;
        }
        textAreaOutput.setText(str.trim());
    }
    private void scan(){
        buttonScan.setEnabled(false);
        File folder = new File(System.getenv("APPDATA")+"\\..\\LocalLow\\VRChat\\VRChat");
        for(File f : folder.listFiles()){
            if(!f.isFile())continue;
            if(!f.getName().startsWith("output_log"))continue;
            try(BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(f)))){
                String line;
                long time = 0;
                while((line = reader.readLine())!=null){
                    if(line.matches("^\\d+\\.\\d+\\.\\d+ \\d+:\\d+:\\d+ Log.*")){
                        String[] splt = line.split(" ");
                        String[] date = splt[0].split("\\.");
                        String[] tim = splt[1].split("\\:");
                        int year = Integer.parseInt(date[0]);
                        int month = Integer.parseInt(date[1]);
                        int day = Integer.parseInt(date[2]);
                        int hour = Integer.parseInt(tim[0]);
                        int min = Integer.parseInt(tim[1]);
                        int sec = Integer.parseInt(tim[2]);
                        time = new GregorianCalendar(year, month-1, day, hour, min, sec).getTimeInMillis();
                    }
                    if(time<lastTime)continue;
                    if(line.contains("ArgusVRC_ProjectAincrad")){
                        String event = line.substring(line.indexOf("ArgusVRC_ProjectAincrad")+"ArgusVRC_ProjectAincrad:".length()).trim();
                        String[] eventParts = event.split(" ", 2);
                        if(eventParts.length==1)continue;//missing event arguments?
                        System.out.println(event.trim());
                        String eventData = eventParts[1];
                        if(eventData.contains("|")&&eventData.indexOf('|')<eventData.indexOf(':')){
                            String[] data = eventData.split("\\|", 2);
                            events.add(new Event(eventParts[0], data[0], data[1]));
                        }else events.add(new Event(eventParts[0], eventData));
                    }
                }
                if(time>lastTime)lastTime = time;
            }catch(IOException ex){}
        }
        save();
        buttonScan.setEnabled(true);
        refreshOutput();
    }
    private void save(){
        File temp = getSaveFile(true);
        if(temp.exists())temp.delete();
        try(ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(temp))){
            oos.writeObject(events);
            oos.writeLong(lastTime);
        }catch(IOException ex){
            Logger.getLogger(AincradKDLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        File file = getSaveFile(false);
        if(file.exists())file.delete();
        temp.renameTo(file);
    }
    private void load(){
        File file = getSaveFile(false);
        if(!file.exists())file = getSaveFile(true);
        if(!file.exists())return;
        try(ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))){
            ArrayList<Event> events = (ArrayList<Event>)ois.readObject();
            try{
                lastTime = ois.readLong();
            }catch(Exception ex){}
            this.events.addAll(events);
        }catch(IOException|ClassNotFoundException ex){
            Logger.getLogger(AincradKDLogger.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshOutput();
    }
    private File getSaveFile(boolean temp){
        return new File("data"+(temp?"_temp":"")+".dat");
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AincradKDLogger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AincradKDLogger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AincradKDLogger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AincradKDLogger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AincradKDLogger().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boxAutoScan;
    private javax.swing.JButton buttonScan;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinnerScanInterval;
    private javax.swing.JTextArea textAreaOutput;
    // End of variables declaration//GEN-END:variables
}